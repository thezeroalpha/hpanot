#!/usr/bin/env ruby
# frozen_string_literal: true

require 'open-uri'
require 'json'

# hypothes.is interface
class Hypothesis
  # a hypothes.is annotation
  class Annotation
    attr_reader :uri, :title
    def initialize(text:, comment:, title:, uri:)
      @text = text
      @comment = comment.empty? ? nil : comment
      @title = title
      @uri = uri
    end

    def to_markdown
      str = @text.split("\n").reduce('') { |acc, line| acc + "> #{line.gsub(/[‘’]/, %q{'}).gsub(/[“”]/, %q{"})}\n" }
      str += "\n"
      str += "#{@comment}\n" if @comment
      str
    end

    def to_markdown_title_url
      "[#{@title}](#{@uri})\n"
    end
  end

  def initialize
    %w[HYPOTHESIS_API_KEY HYPOTHESIS_USERNAME].each do |var|
      die "Please set the #{var} environment variable" if ENV[var].nil?
    end

    @apikey = ENV['HYPOTHESIS_API_KEY']
    @username = ENV['HYPOTHESIS_USERNAME']
    @headers = { 'Host' => 'hypothes.is', 'Accept' => 'application/json', 'Authorization' => "Bearer #{@apikey}" }
    @baseurl = 'https://hypothes.is/api'

    ping || die("Could not access the API #{@baseurl}")
  end

  def search_host(host)
    annotations "wildcard_uri=http://#{host}/*&limit=200&order=asc"
  end

  def search_uri(uri)
    annotations "uri=#{uri}&limit=200&order=asc"
  end

  def recent_urls(num_urls = 2)
    # FIXME: this is a very roundabout, inefficient method. Waiting for an API for this from hypothes.is
    grouped_annotations = annotations('sort=created&order=desc&limit=200').group_by(&:uri)
    n_recent = grouped_annotations.keys[0, num_urls]
    n_recent.inject([]) do |arr, uri|
      arr << { uri: uri, title: grouped_annotations[uri].first.title }
    end
  end

  private

  def ping
    URI.open("#{@baseurl}/", @headers)
    true
  rescue OpenURI::HTTPError
    false
  end

  def die(msg)
    warn msg
    exit 1
  end

  def request(endpoint)
    URI.open(@baseurl + endpoint, @headers) do |response|
      JSON.parse(response.read)['rows']
    end
  rescue OpenURI::HTTPError
    warn "Error getting data from #{endpoint}"
    []
  end

  def annotations(uri_search_str)
    data = request "/search?user=acct:#{@username}@hypothes.is&#{uri_search_str}"
    data.reduce([]) do |arr, annot|
      arr << Annotation.new(text: annot['target'].first['selector']
                                  .select { |f| f['type'] == 'TextQuoteSelector' }.first['exact'],
                            comment: annot['text'],
                            title: annot['document']['title'].first,
                            uri: annot['uri'])
    end
  end
end

def print_usage
  puts <<~HEREDOC
    Usage: hpanot [command] [arg1, [arg2...]]

    Commands:
    site URL      get annotations for a website
    recent [n]    get n (default 2) most recently annotated websites

  HEREDOC
end

ARGV.each do |opt|
  case opt
  when '-h' || '--help'
    print_usage
    exit 0
  end
end

params = ARGV.reject { |arg| arg.start_with? '-' }
if params.empty?
  print_usage
  exit 1
end

case params[0]
when 'site'
  die 'No website specified, use pass -h to print usage.' unless params[1]
  h = Hypothesis.new
  site = params[1]
  annotations = site.start_with?('http') ? h.search_uri(site) : h.search_host(site)
  puts annotations.first.to_markdown_title_url + "\n" + annotations.reduce('') { |str, annot| str + annot.to_markdown }
when 'recent'
  h = Hypothesis.new
  begin
    recent_urls = params[1] ? h.recent_urls(Integer(params[1])) : h.recent_urls
    recent_urls.each { |u| puts "#{u[:uri]}\t#{u[:title]}" }
  rescue ArgumentError
    die 'Argument 2 must be an integer.'
  end
else
  print_usage
  exit 1
end
